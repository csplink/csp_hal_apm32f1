----< add user code begin header
--
-- -----------------------------------------------------------------------------
--  @author:            csplink coder
--  @file:              xmake.lua
--  @brief:             file automatically-generated by tool: [csp]
--  @coder_version:     v0.0.0.2 x v0.0.0.2
--  @hal:               Geehy.csp_hal_apm32f1
--  @hal_version:       latest
--  @project:           led
--  @time:              2024-04-25 10:31:01
--
-- -----------------------------------------------------------------------------
--  @attention
--
--  Copyright (C) 2024 csplink software.
--  All rights reserved.
--
-- -----------------------------------------------------------------------------
--
----> add user code end header
-------------------------------- project rules ---------------------------------
----< add user code begin project rules
add_rules("mode.debug", "mode.release")
add_rules("plugin.compile_commands.autoupdate", {outputdir = ".vscode"})
----> add user code end project rules

-------------------------------- project config --------------------------------
----< add user code begin project config
set_project("led")
set_xmakever("2.8.6")
set_version("0.0.0")

set_config("plat", "cross")
set_config("arch", "arm")
set_config("cpu", "cortex-m3")
----> add user code end project config

----------------------------------- includes -----------------------------------
----< add user code begin includes

----> add user code end includes

---------------------------------- toolchains ----------------------------------
----< add user code begin toolchains
toolchain("arm-none-eabi")
do
    set_kind("standalone")
    set_toolset("cc", "arm-none-eabi-gcc")
    set_toolset("cxx", "arm-none-eabi-g++")
    set_toolset("ld", "arm-none-eabi-g++")
    set_toolset("ar", "arm-none-eabi-ar")
    set_toolset("as", "arm-none-eabi-gcc")
    set_toolset("objcopy", "arm-none-eabi-objcopy")
    set_toolset("size", "arm-none-eabi-size")
end
toolchain_end()
----> add user code end toolchains

------------------------------------- flags ------------------------------------
add_cxxflags("-mcpu=cortex-m3", "-mthumb", "-mthumb-interwork", "-ffunction-sections", "-fdata-sections", "-fno-common", "-fmessage-length=0", "-Wall", "-std=c++11", {force = true})
add_cflags("-mcpu=cortex-m3", "-mthumb", "-mthumb-interwork", "-ffunction-sections", "-fdata-sections", "-fno-common", "-fmessage-length=0", "-Wall", "-std=gnu99", {force = true})
add_asflags("-mcpu=cortex-m3", "-mthumb", "-mthumb-interwork", "-ffunction-sections", "-fdata-sections", "-fno-common", "-fmessage-length=0", "-Wall", "-x", "assembler-with-cpp", {force = true})
add_ldflags("-mcpu=cortex-m3", "-mthumb", "-mthumb-interwork", "-specs=nano.specs", "-specs=nosys.specs", "-Wl,--gc-sections", "-Wl,--print-memory-usage", "-TAPM32F103ZET6.lds", {force = true})
add_defines("APM32F10X_HD", {force = true})
----< add user code begin flags

----> add user code end flags

----< add user code begin 0

----> add user code end 0

target("led")
do
    set_kind("binary")
    ------------------------------ target configs ------------------------------
    ----< add user code begin target configs
    set_languages("c99")
    set_languages("cxx11")

    set_toolchains("arm-none-eabi")

    add_rules("asm")
    ----> add user code end target configs

    ------------------------------- target files -------------------------------
    add_files("core/src/main.c")
    add_files("../../libraries/drivers/src/apm32f10x_adc.c")
    add_files("../../libraries/drivers/src/apm32f10x_bakpr.c")
    add_files("../../libraries/drivers/src/apm32f10x_can.c")
    add_files("../../libraries/drivers/src/apm32f10x_crc.c")
    add_files("../../libraries/drivers/src/apm32f10x_dac.c")
    add_files("../../libraries/drivers/src/apm32f10x_dbgmcu.c")
    add_files("../../libraries/drivers/src/apm32f10x_dma.c")
    add_files("../../libraries/drivers/src/apm32f10x_dmc.c")
    add_files("../../libraries/drivers/src/apm32f10x_eint.c")
    add_files("../../libraries/drivers/src/apm32f10x_fmc.c")
    add_files("../../libraries/drivers/src/apm32f10x_gpio.c")
    add_files("../../libraries/drivers/src/apm32f10x_i2c.c")
    add_files("../../libraries/drivers/src/apm32f10x_iwdt.c")
    add_files("../../libraries/drivers/src/apm32f10x_misc.c")
    add_files("../../libraries/drivers/src/apm32f10x_pmu.c")
    add_files("../../libraries/drivers/src/apm32f10x_qspi.c")
    add_files("../../libraries/drivers/src/apm32f10x_rcm.c")
    add_files("../../libraries/drivers/src/apm32f10x_rtc.c")
    add_files("../../libraries/drivers/src/apm32f10x_sci2c.c")
    add_files("../../libraries/drivers/src/apm32f10x_sdio.c")
    add_files("../../libraries/drivers/src/apm32f10x_smc.c")
    add_files("../../libraries/drivers/src/apm32f10x_spi.c")
    add_files("../../libraries/drivers/src/apm32f10x_tmr.c")
    add_files("../../libraries/drivers/src/apm32f10x_usart.c")
    add_files("../../libraries/drivers/src/apm32f10x_wwdt.c")
    add_files("core/src/system_apm32f10x.c")
    add_files("core/src/gpio.c")

    add_files("startup_apm32f10x_hd.s")

    add_includedirs("core/inc", {public = true})
    add_includedirs("../../libraries/cmsis/inc", {public = true})
    add_includedirs("../../libraries/cmsis_core/inc", {public = true})
    add_includedirs("../../libraries/drivers/inc", {public = true})
    ----< add user code begin target files

    ----> add user code end target files

    ------------------------------- target script ------------------------------
    ----< add user code begin target script
    on_config(function(target)
        import("core.project.config")
        local artifact_dir = path.join(config.buildir(), config.plat(), config.arch(), config.mode())
        local map = path.join(artifact_dir, target:name() .. ".map")
        target:add("ldflags", string.format("-Wl,-Map=%s,--cref", map), {force = true})
    end)

    after_link(function(target)
        import("core.project.config")
        local artifact_dir = path.join(config.buildir(), config.plat(), config.arch(), config.mode())
        local objcopy, _ = target:tool("objcopy")
        local size, _ = target:tool("size")

        if objcopy then
            local hex = path.join(artifact_dir, target:name() .. ".hex")
            os.vrunv(objcopy, {"-O", "ihex", target:targetfile(), hex})
            local bin = path.join(artifact_dir, target:name() .. ".bin")
            os.vrunv(objcopy, {"-O", "binary", target:targetfile(), bin})
        end
        if size then
            os.vexecv(size, {"--format=berkeley", target:targetfile()})
        end
    end)
    ----> add user code end target script

    ----< add user code begin 1

    ----> add user code end 1
end
target_end()

----< add user code begin 2

----> add user code end 2
