{#
 # Licensed under the GNU General Public License v. 3 (the "License")
 # You may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     https://www.gnu.org/licenses/gpl-3.0.html
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
 # Copyright (C) 2022-2024 xqyjlj<xqyjlj@126.com>
 #
 # @author      xqyjlj
 # @file        CMakeLists.txt.j2
 #
 # Change Logs:
 # Date           Author       Notes
 # ------------   ----------   -----------------------------------------------
 # 2024-03-22     xqyjlj       initial version
 #
 #}
{%- extends "csp-file-base.cmake.j2" %}

{%- block project_settings %}
cmake_minimum_required(VERSION 3.7)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
{%- endblock %}

{%- block toolchains %}
set(CMAKE_C_COMPILER_FORCED         TRUE)
set(CMAKE_CXX_COMPILER_FORCED       TRUE)
set(CMAKE_C_COMPILER_ID             GNU)
set(CMAKE_CXX_COMPILER_ID           GNU)

{%- if CSP.toolchainsPath %}
set(TOOLCHAINS_PATH                 "{{ CSP.toolchainsPath|replace("\\", "/") }}/bin/")
{%- else %}
set(TOOLCHAINS_PATH                 "")
{%- endif %}
{%- set suffix = ".exe" if CSP.platform == "win32" and CSP.toolchainsPath else ""  %}
set(CMAKE_C_COMPILER                ${TOOLCHAINS_PATH}arm-none-eabi-gcc{{ suffix }})
set(CMAKE_ASM_COMPILER              ${TOOLCHAINS_PATH}arm-none-eabi-gcc{{ suffix }})
set(CMAKE_CXX_COMPILER              ${TOOLCHAINS_PATH}arm-none-eabi-g++{{ suffix }})
set(CMAKE_OBJCOPY                   ${TOOLCHAINS_PATH}arm-none-eabi-objcopy{{ suffix }})
set(CMAKE_OBJDUMP                   ${TOOLCHAINS_PATH}arm-none-eabi-objdump{{ suffix }})
set(CMAKE_SIZE                      ${TOOLCHAINS_PATH}arm-none-eabi-size{{ suffix }})
{%- endblock %}

{%- block project_info %}
project({{ CSP.project.name }} VERSION 0.0.0 LANGUAGES ASM C)
{%- endblock %}

{%- block flags %}
set(CMAKE_CXX_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -Wall -std=c++11")
set(CMAKE_C_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -Wall -std=gnu99")
set(CMAKE_ASM_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -Wall -x assembler-with-cpp")
set(CMAKE_EXE_LINKER_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -specs=nano.specs -specs=nosys.specs -Wl,--gc-sections,--print-memory-usage,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map,--cref -T${CMAKE_SOURCE_DIR}/{{ CSP.project.targetChip }}.lds")
add_definitions(
{%- for define in CSP.project|builder_defines  %}
    -D{{ define }}
{%- endfor %}
)

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(STATUS "Maximum optimization for speed")
    add_compile_options(-Ofast)
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    message(STATUS "Maximum optimization for speed, debug info included")
    add_compile_options(-Ofast -g)
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
    message(STATUS "Maximum optimization for size")
    add_compile_options(-Os)
else ()
    message(STATUS "Minimal optimization, debug info included")
    add_compile_options(-O0 -g)
endif ()
{%- endblock %}

{%- block files %}
set(SOURCES
{%- for file in CSP.project|builder_src_files %}
    {{ file }}
{%- endfor %}
    {{ CSP.project|builder_startup_file }}
)
{%- endblock %}

{%- block includes %}
set(INCLUDES
{%- for dir in CSP.project|builder_inc_dirs%}
    {{ dir }}
{%- endfor %}
)
{%- endblock %}

{%- block files_includes %}
include_directories(${INCLUDES})
add_executable(${PROJECT_NAME}.elf ${SOURCES} ${CMAKE_SOURCE_DIR}/{{ CSP.project.targetChip }}.lds)
{%- endblock %}

{%- block command %}
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${PROJECT_NAME}.elf> ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex
    COMMAND ${CMAKE_SIZE} --format=berkeley $<TARGET_FILE:${PROJECT_NAME}.elf>
)
{%- endblock %}
