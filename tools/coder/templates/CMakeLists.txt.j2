{#
# Licensed under the GNU General Public License v. 3 (the "License")
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.gnu.org/licenses/gpl-3.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2022-2024 xqyjlj<xqyjlj@126.com>
#
# @author      xqyjlj
# @file        CMakeLists.txt.j2
#
# Change Logs:
# Date           Author       Notes
# ------------   ----------   -----------------------------------------------
# 2024-03-22     xqyjlj       initial version
#
#}
{%- extends "csp-file-base.cmake.j2" %}

{%- block project_settings %}
cmake_minimum_required(VERSION 3.7)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
{%- endblock %}

{%- block toolchains %}
set(CMAKE_C_COMPILER "arm-none-eabi-gcc")
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_ASM_COMPILER "arm-none-eabi-gcc")
set(CMAKE_ASM_COMPILER_WORKS TRUE)
set(CMAKE_CXX_COMPILER "arm-none-eabi-g++")
set(CMAKE_CXX_COMPILER_WORKS TRUE)
set(CMAKE_OBJCOPY "arm-none-eabi-objcopy")
set(CMAKE_OBJDUMP "arm-none-eabi-objdump")
set(CMAKE_SIZE "arm-none-eabi-size")
{%- endblock %}

{%- block project_info %}
project({{Project.Name}} VERSION 0.0.0 LANGUAGES ASM C)
{%- endblock %}

{%- block flags %}
set(CMAKE_CXX_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -std=c++11")
set(CMAKE_C_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -std=gnu99")
set(CMAKE_EXE_LINKER_FLAGS "-mcpu=cortex-m3 -mthumb -mthumb-interwork -Wl,--gc-sections -Wl,--print-memory-usage -T${CMAKE_SOURCE_DIR}/{{Project['TargetChip']}}.lds -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map")
add_definitions(
    {%- for marco in CoderData['Marco']%}
    -D{{marco}}
    {%- endfor %}
)
{%- endblock %}

{%- block files %}
set(SOURCES
    {%- for file in CoderData['Files']['Src']%}
    {{file}}
    {%- endfor %}
    {{CoderData['StartupFile']['Name']}}
)
{%- endblock %}

{%- block includes %}
set(INCLUDES
    {%- for dir in CoderData['Files']['Inc']%}
    {{dir}}
    {%- endfor %}
)
{%- endblock %}

{%- block files_includes %}

include_directories(${INCLUDES})
add_executable(${PROJECT_NAME}.elf ${SOURCES} ${CMAKE_SOURCE_DIR}/{{Project['TargetChip']}}.lds)
{%- endblock %}

{%- block command %}
add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${PROJECT_NAME}.elf> ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin
    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex
    COMMAND ${CMAKE_SIZE} --format=berkeley $<TARGET_FILE:${PROJECT_NAME}.elf>
)
{%- endblock %}
