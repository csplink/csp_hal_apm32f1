{#
# Licensed under the GNU General Public License v. 3 (the "License")
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.gnu.org/licenses/gpl-3.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright (C) 2022-2024 xqyjlj<xqyjlj@126.com>
#
# @author      xqyjlj
# @file        xmake.lua.j2
#
# Change Logs:
# Date           Author       Notes
# ------------   ----------   -----------------------------------------------
# 2024-03-22     xqyjlj       initial version
#
#}
{%- extends "csp-file-base.xmake.lua.j2" %}

{%- block project_config %}
set_project("{{Project.Name}}")
set_xmakever("2.8.6")
set_version("0.0.0")

set_config("plat", "cross")
set_config("arch", "arm")
set_config("cpu", "cortex-m3")
{%- endblock %}

{%- block toolchains %}
toolchain("arm-none-eabi")
do
    set_kind("standalone")
    set_toolset("cc", "arm-none-eabi-gcc")
    set_toolset("cxx", "arm-none-eabi-g++")
    set_toolset("ld", "arm-none-eabi-g++")
    set_toolset("ar", "arm-none-eabi-ar")
    set_toolset("as", "arm-none-eabi-gcc")
    set_toolset("objcopy", "arm-none-eabi-objcopy")
    set_toolset("size", "arm-none-eabi-size")
{%- if ToolchainsPath %}
    set_sdkdir("{{ToolchainsPath}}")
{%- endif %}
end
toolchain_end()
{%- endblock %}

{%- block flags %}
add_ldflags("-mcpu=cortex-m3", "-mthumb", "-specs=nano.specs", "-Wl,--gc-sections", "-lnosys", "-Wl,--print-memory-usage", "-T{{Project['TargetChip']}}.lds", {force = true})
add_cxflags("-mcpu=cortex-m3", "-mthumb", "-ffunction-sections", "-fdata-sections", {force = true})
add_asflags("-mcpu=cortex-m3", "-mthumb", "-ffunction-sections", "-fdata-sections", {force = true})
add_defines("{{CoderData['Marco']|join('", "')}}", {force = true})
{%- endblock %}

{%- block target_configs %}
    set_warnings("allextra")
    set_warnings("error")
    set_languages("c99")
    set_languages("cxx11")

    set_toolchains("arm-none-eabi")

    add_rules("asm")
{%- endblock %}

{%- block target_files %}
    {%- for file in CoderData['Files']['Src']%}
    add_files("{{file}}")
    {%- endfor %}
{% set _ = "" %}
    add_files("{{CoderData['StartupFile']['Name']}}")
{% set _ = "" %}
    {%- for dir in CoderData['Files']['Inc']%}
    add_includedirs("{{dir}}", {public = true})
    {%- endfor %}
{%- endblock %}

{%- block target_script %}
    on_config(function(target)
        import("core.project.config")
        local artifact_dir = path.join(config.buildir(), config.plat(), config.arch(), config.mode())
        local map = path.join(artifact_dir, target:name() .. ".map")
        target:add("ldflags", string.format("-Wl,-Map=%s,--cref", map)  , {force = true})
    end)

    after_link(function(target)
        import("core.project.config")
        local artifact_dir = path.join(config.buildir(), config.plat(), config.arch(), config.mode())
        local objcopy, _ = target:tool("objcopy")
        local size, _ = target:tool("size")

        if objcopy then
            local hex = path.join(artifact_dir, target:name() .. ".hex")
            os.vrunv(objcopy, {"-O", "ihex", target:targetfile(), hex})
            local bin = path.join(artifact_dir, target:name() .. ".bin")
            os.vrunv(objcopy, {"-O", "binary", target:targetfile(), bin})
        end
        if size then
            os.vexecv(size, {"--format=berkeley", target:targetfile()})
        end
    end)
{%- endblock %}
